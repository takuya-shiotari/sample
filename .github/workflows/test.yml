name: Redis container example
on: push

env:
  RUBY_VERSION: 3.1.2
  FREETDS_VERSION: 1.3.17
  DB_HOST: 127.0.0.1
  DB_USER: sa
  DB_PASSWORD: "yourStrong(!)Password"
  IMAGE_TAG: latest

jobs:
  build_elasticserach:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4.1.0
        with:
          fetch-depth: 0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.ECR_REGISTRY }}
      - name: Build and push API
        uses: docker/build-push-action@v5
        with:
          push: true
          provenance: false
          context: containers/elasticsearch
          tags: ${{ vars.ECR_REGISTRY }}/${{ vars.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'false'
      - name: test
        run: |
          echo "registry: ${{ steps.login-ecr.outputs.registry }}"
          echo "docker_username: ${{ steps.login-ecr.outputs.docker_username_321055706437_dkr_ecr_ap_northeast_1_amazonaws_com }}"
          echo "docker_password: ${{ steps.login-ecr.outputs.docker_password_321055706437_dkr_ecr_ap_northeast_1_amazonaws_com }}"

    outputs:
      registry: ${{ steps.login-ecr.outputs.registry }}
      docker_username: ${{ steps.login-ecr.outputs.docker_username_321055706437_dkr_ecr_ap_northeast_1_amazonaws_com }}
      docker_password: ${{ steps.login-ecr.outputs.docker_password_321055706437_dkr_ecr_ap_northeast_1_amazonaws_com }}
  test:
    runs-on: ubuntu-22.04
    needs: build_elasticserach
    services:
      mssql:
        image: mcr.microsoft.com/mssql/server:2017-latest
        ports:
          - 1433:1433
        env:
          ACCEPT_EULA: "Y"
          SA_PASSWORD: ${{ env.DB_PASSWORD }}
      elasticsearch:
        image: ${{ needs.build_elasticserach.outputs.registry }}/${{ vars.ECR_REPOSITORY }}:latest
        credentials:
          username: AWS
          password: ${{ needs.build_elasticserach.outputs.docker_password }}
    strategy:
      matrix:
        ci_node_total:
          - 16
        ci_node_index:
          - 0,1
          - 2,3
          - 4,5
          - 6,7
          - 8,9
          - 10,11
          - 12,13
          - 14,15
    steps:
      - uses: actions/checkout@v4.1.0
        with:
          fetch-depth: 0
          submodules: 'recursive'
          ssh-key: ${{ secrets.PRIVATE_REPO_SSH_KEY }}
      - name: Cache freetds
        id: cache-Primes
        uses: actions/cache@v4
        with:
          path: ~/freetds-${{ env.FREETDS_VERSION }}
          key: ${{ runner.os }}-freetds
      - name: Cache node modules
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install freetds
        run: |
          ls assets/
          cat assets/README.md
          cd ~/
          if [ ! -d "freetds-${FREETDS_VERSION}" ]; then
            sudo apt-get update --allow-releaseinfo-change
            sudo apt-get -y install libsasl2-dev
            wget http://www.freetds.org/files/stable/freetds-${FREETDS_VERSION}.tar.gz
            tar -xzf freetds-${FREETDS_VERSION}.tar.gz
            cd freetds-${FREETDS_VERSION}
            sudo ./configure --with-tdsver=7.4
            sudo make
            cd ..
          fi
          cd freetds-${FREETDS_VERSION}
          sudo make install
      - name: Install mecab
        run: |
          sudo apt-get update --allow-releaseinfo-change
          sudo apt-get install -y mecab libmecab-dev mecab-ipadic mecab-ipadic-utf8
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true
      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: npm list
      - name: Install dependencies
        run: npm install

      - name: bundle exec rubocop
        run: bundle exec rubocop
      - name: Rspec
        env:
          PARALLEL_TESTS_CONCURRENCY: ${{ matrix.ci_node_total }}
          CONCURRENCY_INDEX: ${{ matrix.ci_node_index }}
        run: |
          bundle exec rails "parallel:setup[2]"
          bundle exec parallel_rspec -n $PARALLEL_TESTS_CONCURRENCY --only-group $CONCURRENCY_INDEX

      - name: Archive code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.ci_node_index }}
          path: coverage/.resultset.json

  merge_coverage:
    needs: test
    runs-on: ubuntu-22.04
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
      - name: Move generated files
        run: |
          mkdir -p /tmp/coverage
          artifacts=($(ls))
          for artifact in "${artifacts[@]}"; do
            mv ${artifact}/.resultset.json /tmp/coverage/.resultset-${artifact}.json
            rm -r "${artifact}"
          done
      - uses: actions/checkout@v4.1.0
        with:
          fetch-depth: 0
      - name: Install mecab
        run: |
          sudo apt-get update --allow-releaseinfo-change
          sudo apt-get install -y mecab libmecab-dev mecab-ipadic mecab-ipadic-utf8
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true
      - name: Collates all result sets
        run: bundle exec rails "coverage:report[/tmp/coverage/.resultset-*.json]"
      - name: Archive code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage

  report_coverage:
    needs: merge_coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.1.0
        with:
          fetch-depth: 0
      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          name: coverage
          path: coverage
      - name: Coverage Report by octocov
        uses: k1LoW/octocov-action@v1

  build_github_pages:
    needs: merge_coverage
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4.1.0
        with:
          fetch-depth: 0
          path: main
      - name: Checkout swagger-ui
        uses: actions/checkout@v4
        with:
          repository: swagger-api/swagger-ui
          ref: 'v4.15.5'
          path: swagger-ui
      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          name: coverage
          path: coverage
      - name: Build GitHub Pages
        run: |
          mkdir -p github_pages_artifact/swagger-ui/
          cp -n swagger-ui/dist/* github_pages_artifact/swagger-ui/
          cp -r coverage github_pages_artifact/
      - name: Upload page artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: github_pages_artifact/

  deploy_github_pages:
    needs: build_github_pages
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
