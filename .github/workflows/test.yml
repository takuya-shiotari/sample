name: Test

on:
  push:
    branches-ignore:
      - release

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  BUNDLE_ENTERPRISE__CONTRIBSYS__COM: ${{ secrets.BUNDLE_ENTERPRISE__CONTRIBSYS__COM }}
  DB_PASSWORD: yourStrong(!)Password
  SWAGGER_UI_VERSION: v4.15.5
  TZ: Asia/Tokyo
  TEST_JOB_PARALLEL_COUNT: 2
  RAILS_ENV: test

defaults:
  run:
    shell: bash

jobs:
  setup-matrix:
    runs-on: ubuntu-20.04
    timeout-minutes: 5
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Set matrix
        id: set-matrix
        run: |
           seq -s ',' 0 $(($TEST_JOB_PARALLEL_COUNT - 1)) | \
             jq -R 'split(",") | map(select(length > 0)) | map(tonumber)' | \
             jq -r '"matrix={\"test_job_index\":\(.)}"' >> $GITHUB_OUTPUT

  test:
    runs-on: ubuntu-20.04
    timeout-minutes: 20
    permissions:
      contents: read
      actions: read
    needs:
      - setup-matrix
    services:
      mssql:
        image: mcr.microsoft.com/mssql/server:2017-latest
        ports:
          - 1433:1433
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: ${{ env.DB_PASSWORD }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup-matrix.outputs.matrix) }}
    env:
      DD_CIVISIBILITY_AGENTLESS_ENABLED: true
      DD_API_KEY: ${{ secrets.DD_API_KEY }}
      DD_SITE: ${{ secrets.DD_SITE }}
      DD_ENV: ci
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.CI_USER_GITHUB_TOKEN }}
      - name: Setup rails application
        uses: ./.github/actions/setup-rails-application
      - name: Bundle assets
        run: |
          NODE_OPTIONS="--max-old-space-size=512" ./node_modules/.bin/webpack
      - name: Update mecabrc
        run: |
          sudo chown runner:runner /etc/mecabrc
          # bundle exec rake mecab:update_mecabrc
      - name: Download previous test result
        uses: actions/download-artifact@v4
        with:
          pattern: test-result-${{ matrix.test_job_index }}
          path: ${{ runner.temp }}
      - name: Place previous test result
        id: previous-test-result
        env:
          TEST_RESULT_DIR: ${{ runner.temp }}/test-result-${{ matrix.test_job_index }}
        run: |
          if [ -f ${TEST_RESULT_DIR}/spec/examples.txt ]; then
            mv ${TEST_RESULT_DIR}/spec/examples.txt spec/examples.txt
            echo "failed-tests-only=true" >> $GITHUB_OUTPUT
          fi
          mkdir -p test_results coverage
          if [ -e ${TEST_RESULT_DIR}/test_results ]; then
            mv ${TEST_RESULT_DIR}/test_results/* test_results/
          fi
          if [ -e ${TEST_RESULT_DIR}/coverage ]; then
            mv ${TEST_RESULT_DIR}/coverage/.resultset*.json coverage/
          fi
          if [ -e ${TEST_RESULT_DIR}/test_results ] || [ -e ${TEST_RESULT_DIR}/coverage ]; then
            bundle exec ruby scripts/rename_and_clean_test_results.rb
          fi
      - name: Setup DB
        run: bundle exec rails "parallel:setup[`nproc`]"
      - name: Download all test results for default branch
        if: ${{ !steps.previous-test-result.outputs.failed-tests-only }}
        uses: dawidd6/action-download-artifact@v6
        with:
          name: test-result-*
          name_is_regexp: true
          path: ${{ runner.temp }}/default-branch-test-results
          branch: ${{ github.event.repository.default_branch }}
          workflow_conclusion: success
          if_no_artifact_found: warn
      - name: Split tests by timings
        if: ${{ !steps.previous-test-result.outputs.failed-tests-only }}
        uses: r7kamura/split-tests-by-timings@v0
        id: split-tests
        with:
          reports: ${{ runner.temp }}/default-branch-test-results/**/test_results
          glob: spec/**/*_spec.rb
          index: ${{ matrix.test_job_index }}
          total: ${{ env.TEST_JOB_PARALLEL_COUNT }}
      - name: Run rspec in parallel
        if: ${{ !steps.previous-test-result.outputs.failed-tests-only }}
        run: bundle exec parallel_rspec -n `nproc` ${{ steps.split-tests.outputs.paths }}
      - name: Re-run rspec only failures
        if: ${{ steps.previous-test-result.outputs.failed-tests-only }}
        run: bundle exec rspec --only-failures --failure-exit-code=0
      - name: Run rspec only failures
        run: |
          bundle exec ruby scripts/rename_and_clean_test_results.rb
          bundle exec rspec --only-failures
      - name: Filter invalid JUnit XML reports
        if: ${{ success() || failure() }}
        run: |
          invalid_found=0
          for file in `find test_results -type f -name '*.xml'`; do
            if ! xmllint --noout "$file" 2>/dev/null; then
              echo "Invalid XML file found and deleted: $file"
              rm "$file"
              invalid_found=1
            fi
          done
          exit $invalid_found
      - name: Upload test result
        if: ${{ success() || failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: test-result-${{ matrix.test_job_index }}
          path: |
            test_results/
            spec/examples.txt
            coverage/.resultset*.json
          include-hidden-files: true
          if-no-files-found: ignore

  report-coverage:
    needs: test
    runs-on: ubuntu-20.04
    timeout-minutes: 5
    permissions:
      contents: read
      actions: read
      pull-requests: write
    if: ${{ success() || failure() }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup rails application
        uses: ./.github/actions/setup-rails-application
      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          pattern: test-result-*
          path: ${{ runner.temp }}/test-results
      - name: Aggregate all coverage resultsets
        run: bundle exec rails "coverage:report[${{ runner.temp }}/test-results/**/coverage/.resultset*.json]"
      - name: Report coverage by octocov
        uses: k1LoW/octocov-action@v1
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage
          include-hidden-files: true
      - name: Download octocov-report for default branch
        uses: dawidd6/action-download-artifact@v6
        with:
          name: octocov-report
          path: ${{ runner.temp }}/octocov-report
          branch: ${{ github.event.repository.default_branch }}
          workflow_conclusion: success
          if_no_artifact_found: warn
      - name: Display coverage details for sources with coverage changes
        env:
          OLD_REPORT_PATH: ${{ runner.temp }}/octocov-report/report.json
          NEW_REPORT_PATH: ${{ runner.temp }}/report.json
        run: |
          if [ ! -f ${OLD_REPORT_PATH} ]; then
            exit 0
          fi
          octocov dump > ${NEW_REPORT_PATH}
          diff -y -W 1000 --suppress-common-lines \
            <(cat ${OLD_REPORT_PATH} | jq -r ".coverage.files[] | [.file, .covered / .total * 100] | @csv" | sort) \
            <(cat ${NEW_REPORT_PATH} | jq -r ".coverage.files[] | [.file, .covered / .total * 100] | @csv" | sort) | \
            awk -F "[\t ]*[|<>][\t ]*" '{ split($1, old, ","); split($2, new, ","); if (new[1] ~ /[^ \t]/) { print "::group::" new[1] ": " int(old[1] == new[1] ? old[2] : 0) "% -> " int(new[2]) "%"; system("octocov view "new[1]""); print "::endgroup::" } }' || \
            true

  report-failed-tests:
    needs: test
    runs-on: ubuntu-20.04
    timeout-minutes: 5
    continue-on-error: true
    permissions:
      contents: read
      pull-requests: write
    if: ${{ success() || failure() }}
    env:
      REVIEWDOG_JSON_FILE_NAME: rspec_reviewdog.jsonl
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup rails application
        uses: ./.github/actions/setup-rails-application
      - name: Setup reviewdog
        uses: reviewdog/action-setup@v1
        with:
          reviewdog_version: v0.20.0
      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          pattern: test-result-*
          path: ${{ runner.temp }}/test-results
      - name: Generate RSspec reviewdog json
        env:
          JUNIT_XML_FILE_PATH_PATTERN: ${{ runner.temp }}/test-results/**/test_results/*.xml
          REVIEWDOG_JSON_FILE_PATH: ${{ runner.temp }}/${{ env.REVIEWDOG_JSON_FILE_NAME }}
        run: bundle exec ruby scripts/generate_rspec_reviewdog_json.rb
      - name: Run rspec reviewdog
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ github.token }}
          REVIEWDOG_JSON_FILE_PATH: ${{ runner.temp }}/${{ env.REVIEWDOG_JSON_FILE_NAME }}
        run: |
          cat $REVIEWDOG_JSON_FILE_PATH | reviewdog -f=rdjsonl -reporter=github-check

  report-test-summary:
    needs: test
    runs-on: ubuntu-20.04
    timeout-minutes: 5
    continue-on-error: true
    permissions:
      contents: read
      pull-requests: write
    if: ${{ success() || failure() }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          pattern: test-result-*
          path: ${{ runner.temp }}/test-results
      - name: Download previous merged JUnit XML
        uses: actions/download-artifact@v4
        with:
          pattern: merged_rspec
          path: ${{ runner.temp }}/previous-test-results
      - name: Merge JUnit XMLs
        run: npx --yes junit-report-merger ${{ runner.temp }}/merged_rspec.xml "${{ runner.temp }}/test-results/**/test_results/*.xml" "${{ runner.temp }}/previous-test-results/*.xml"
      - name: Upload merged JUnit XML
        uses: actions/upload-artifact@v4
        with:
          name: merged_rspec
          path: ${{ runner.temp }}/merged_rspec.xml

  build-github-pages:
    needs: report-coverage
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: ${{ format('refs/heads/{0}', github.event.repository.default_branch) == github.ref }}
    steps:
      - name: Download coverage
        uses: actions/download-artifact@v4
        with:
          name: coverage
          path: coverage
      - name: Upload pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: coverage

  deploy-github-pages:
    needs: build-github-pages
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: ${{ format('refs/heads/{0}', github.event.repository.default_branch) == github.ref }}
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
