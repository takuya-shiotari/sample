name: Test

on:
  push:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  BUNDLE_ENTERPRISE__CONTRIBSYS__COM: ${{ secrets.BUNDLE_ENTERPRISE__CONTRIBSYS__COM }}
  DB_PASSWORD: yourStrong(!)Password
  SWAGGER_UI_VERSION: v4.15.5
  TZ: Asia/Tokyo
  CI_NODE_TOTAL: 2
  CI_NODE_CPU_CORES: 2
  RAILS_ENV: test

jobs:
  setup-matrix:
    runs-on: ubuntu-20.04
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Set matrix
        id: set-matrix
        run: |
           seq -s ',' 0 $(($CI_NODE_TOTAL - 1)) | \
             jq -R 'split(",") | map(select(length > 0)) | map(tonumber)' | \
             jq -r '"matrix={\"ci_node_index\":\(.)}"' >> $GITHUB_OUTPUT

  test:
    runs-on: ubuntu-20.04
    needs:
      - setup-matrix
    services:
      mssql:
        image: mcr.microsoft.com/mssql/server:2017-latest
        ports:
          - 1433:1433
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: ${{ env.DB_PASSWORD }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup-matrix.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.CI_USER_GITHUB_TOKEN }}
      - name: Setup rails application
        uses: ./.github/actions/setup-rails-application
      - name: Bundle assets
        run: |
          NODE_OPTIONS="--max-old-space-size=512" ./node_modules/.bin/webpack
      - name: Update mecabrc
        run: |
          sudo chown runner:runner /etc/mecabrc
          # bundle exec rake mecab:update_mecabrc
      # 一つ前のrspecの実行データ(spec/examples.txt)をダウンロードする
      - name: Download spec/examples.txt
        uses: actions/download-artifact@v4
        with:
          pattern: examples-${{ matrix.ci_node_index }}
          path: tmp
      # spec/examples.txtがある場合は、再実行なので失敗したテストだけを実行する
      # spec/examples.txtがない場合は、初回実行なのでmasterブランチのJUnit XMLデータからテストを分割して全テスト実行
      - name: Check if only failed tests should be re-run
        id: failed-tests-only
        run: |
          if [ -e tmp/examples-${{ matrix.ci_node_index }}/examples.txt ]; then
            mv tmp/examples-${{ matrix.ci_node_index }}/examples.txt spec/examples.txt
            sudo chown runner:runner spec/examples.txt
            echo "value=true" >> $GITHUB_OUTPUT
          else
            echo "value=" >> $GITHUB_OUTPUT
          fi
      # masterブランチのテスト結果(JUnit XML)をダウンロード
      - name: Download JUnit XML reports (full test for master branch)
        if: ${{ !steps.failed-tests-only.outputs.value }}
        uses: dawidd6/action-download-artifact@v5
        with:
          name: junit-xml-reports-[0-9]+
          name_is_regexp: true
          path: tmp/junit-xml-reports-downloaded
          branch: ${{ github.event.repository.default_branch }}
          workflow_conclusion: success
        continue-on-error: true
      # masterブランチのテスト結果(JUnit XML)を元にテストの実行時間が各ノードで均一になるように分割
      - name: Split tests by timings
        if: ${{ !steps.failed-tests-only.outputs.value }}
        uses: r7kamura/split-tests-by-timings@v0
        id: split-tests
        with:
          reports: tmp/junit-xml-reports-downloaded
          glob: spec/**/*_spec.rb
          index: ${{ matrix.ci_node_index }}
          total: ${{ env.CI_NODE_TOTAL }}
      - name: Setup DB
        run: bundle exec rails "parallel:setup[${CI_NODE_CPU_CORES}]"
      - name: Run rspec in parallel
        if: ${{ !steps.failed-tests-only.outputs.value }}
        run: bundle exec parallel_rspec -n $CI_NODE_CPU_CORES ${{ steps.split-tests.outputs.paths }}
      - name: Re-run rspec only failures
        if: ${{ steps.failed-tests-only.outputs.value }}
        run: bundle exec rspec --only-failures --failure-exit-code=0
      - name: Filter invalid JUnit XML reports
        if: ${{ !steps.failed-tests-only.outputs.value }}
        run: |
          for file in `find test_results -type f -name '*.xml'`; do
            xmllint --noout $file || rm -rf $file
          done
      # masterブランチの場合だけ全テストのJUnit XMLをアップロードする
      # また、再実行だと失敗したテストのみの実行になりカバレッジが下がってしまうので、再実行時はアップロードしない
      - name: Upload JUnit XML reports (full test for master branch)
        if: ${{ format('refs/heads/{0}', github.event.repository.default_branch) == github.ref && !steps.failed-tests-only.outputs.value }}
        uses: actions/upload-artifact@v4
        with:
          name: junit-xml-reports-${{ matrix.ci_node_index }}
          path: test_results
          if-no-files-found: error
      - name: Upload coverage/.resultset.json
        if: ${{ !steps.failed-tests-only.outputs.value }}
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.ci_node_index }}
          path: coverage/.resultset.json
      - name: Run rspec only failures
        run: |
          rm -rf test_results/*
          bundle exec rspec --only-failures --format RspecJunitFormatter --out test_results/rspec.xml
      # 再実行時に失敗したテストを実行するために保存しておく
      - name: Upload spec/examples.txt
        if: ${{ success() || failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: examples-${{ matrix.ci_node_index }}
          path: spec/examples.txt
          if-no-files-found: ignore
      - name: Filter invalid JUnit XML reports
        if: ${{ success() || failure() }}
        run: |
          for file in `find test_results -type f -name '*.xml'`; do
            xmllint --noout $file || rm -rf $file
          done
      # report-failed-testsで使用するJUnit XMLをアップロードする
      # こちらのJUnit XMLは失敗したテストデータだけ取得できればよいでの、初回実行・再実行どちらもアップロードする
      - name: Upload JUnit XML reports (partial test)
        if: ${{ success() || failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: junit-xml-reports-partial-${{ matrix.ci_node_index }}
          path: test_results
          if-no-files-found: ignore

  report-coverage:
    needs: test
    runs-on: ubuntu-20.04
    permissions:
      contents: read
      pull-requests: write
    if: success() || failure()
    steps:
      - name: Download all coverage artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: coverage-*
      - name: Move generated files
        run: |
          mkdir -p /tmp/coverage
          artifacts=($(ls))
          for artifact in "${artifacts[@]}"; do
            mv ${artifact}/.resultset.json /tmp/coverage/.resultset-${artifact}.json
            rm -r "${artifact}"
          done
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup rails application
        uses: ./.github/actions/setup-rails-application
      - name: Collates all result sets
        run: bundle exec rails "coverage:report[/tmp/coverage/.resultset-*.json]"
      - name: Coverage Report by octocov
        uses: k1LoW/octocov-action@v1
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage

  report-failed-tests:
    needs: test
    runs-on: ubuntu-20.04
    continue-on-error: true
    permissions:
      contents: read
      pull-requests: write
    if: success() || failure()
    env:
      OUTPUT_FILE_PATH: tmp/rspec_reviewdog.jsonl
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup reviewdog
        uses: reviewdog/action-setup@v1
      - name: Setup rails application
        uses: ./.github/actions/setup-rails-application
      # masterブランチではなく、直前のtestジョブでアップロードしたJUnit XMLをダウンロードする
      - name: Download JUnit XML reports (partial test)
        uses: actions/download-artifact@v4
        with:
          pattern: junit-xml-reports-partial-*
          path: tmp/junit-xml-reports-downloaded
      - name: Generate RSspec reviewdog json
        env:
          JUNIT_XML_FILE_PATH_PATTERN: tmp/junit-xml-reports-downloaded/**/*.xml
        run: bundle exec ruby scripts/generate_rspec_reviewdog_json.rb
      - name: Run rspec reviewdog
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ github.token }}
        run: |
          cat $OUTPUT_FILE_PATH | reviewdog -f=rdjsonl -reporter=github-check

  build-github-pages:
    needs: report-coverage
    runs-on: ubuntu-20.04
    if: format('refs/heads/{0}', github.event.repository.default_branch) == github.ref
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: main
      - name: Checkout swagger-ui
        uses: actions/checkout@v4
        with:
          repository: swagger-api/swagger-ui
          ref: ${{ env.SWAGGER_UI_VERSION }}
          path: swagger-ui
      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          name: coverage
          path: coverage
      - name: Build GitHub Pages
        run: |
          mkdir -p github_pages_artifact/swagger-ui/
          cp swagger-ui/dist/* github_pages_artifact/swagger-ui/
          cp -f main/docs/dist/swagger-ui/* github_pages_artifact/swagger-ui/
          cp -r coverage github_pages_artifact/
      - name: Upload page artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: github_pages_artifact/

  deploy-github-pages:
    needs: build-github-pages
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-20.04
    if: format('refs/heads/{0}', github.event.repository.default_branch) == github.ref
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
