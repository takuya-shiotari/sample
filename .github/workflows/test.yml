name: Test

on:
  push:

env:
  DB_PASSWORD: yourStrong(!)Password
  ECR_DOCKER_USERNAME: AWS
  SWAGGER_UI_VERSION: v4.15.5

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-elasticsearch:
    uses: ./.github/workflows/build-elasticsearch.yml
    secrets: inherit
  test:
    runs-on: ubuntu-20.04
    needs: build-elasticsearch
    services:
      mssql:
        image: mcr.microsoft.com/mssql/server:2017-latest
        ports:
          - 1433:1433
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: ${{ env.DB_PASSWORD }}
      dynamodb-local:
        image: amazon/dynamodb-local:1.17.0
        ports:
          - 8000:8000
      elasticsearch1:
        image: ${{ needs.build-elasticsearch.outputs.registry }}/${{ vars.ECR_REPOSITORY }}:${{ needs.build-elasticsearch.outputs.tag }}
        credentials:
          username: ${{ env.ECR_DOCKER_USERNAME }}
          password: ${{ needs.build-elasticsearch.outputs.docker-password }}
        env:
          cluster.name: elasticsearch-cluster
          node.name: elasticsearch-node1
          discovery.seed_hosts: elasticsearch-node1,elasticsearch-node2,elasticsearch-node3
          cluster.initial_master_nodes: elasticsearch-node1,elasticsearch-node2,elasticsearch-node3
          ES_JAVA_OPTS: -Xms256m -Xmx256m
      elasticsearch2:
        image: ${{ needs.build-elasticsearch.outputs.registry }}/${{ vars.ECR_REPOSITORY }}:${{ needs.build-elasticsearch.outputs.tag }}
        credentials:
          username: ${{ env.ECR_DOCKER_USERNAME }}
          password: ${{ needs.build-elasticsearch.outputs.docker-password }}
        env:
          cluster.name: elasticsearch-cluster
          node.name: elasticsearch-node2
          discovery.seed_hosts: elasticsearch-node1,elasticsearch-node2,elasticsearch-node3
          cluster.initial_master_nodes: elasticsearch-node1,elasticsearch-node2,elasticsearch-node3
          ES_JAVA_OPTS: -Xms256m -Xmx256m
      elasticsearch3:
        image: ${{ needs.build-elasticsearch.outputs.registry }}/${{ vars.ECR_REPOSITORY }}:${{ needs.build-elasticsearch.outputs.tag }}
        credentials:
          username: ${{ env.ECR_DOCKER_USERNAME }}
          password: ${{ needs.build-elasticsearch.outputs.docker-password }}
        env:
          cluster.name: elasticsearch-cluster
          node.name: elasticsearch-node3
          discovery.seed_hosts: elasticsearch-node1,elasticsearch-node2,elasticsearch-node3
          cluster.initial_master_nodes: elasticsearch-node1,elasticsearch-node2,elasticsearch-node3
          ES_JAVA_OPTS: -Xms256m -Xmx256m
    strategy:
      fail-fast: false
      matrix:
        ci_node_total:
          - 2
          #- 16
        ci_node_index:
          - 0,1
          #- 2,3
          #- 4,5
          #- 6,7
          #- 8,9
          #- 10,11
          #- 12,13
          #- 14,15
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
          token: ${{ secrets.CI_USER_GITHUB_TOKEN }}
      - uses: ./.github/actions/setup-rails-application
      - name: Run rspec
        env:
          PARALLEL_TESTS_CONCURRENCY: ${{ matrix.ci_node_total }}
          CONCURRENCY_INDEX: ${{ matrix.ci_node_index }}
        run: |
          bundle exec rails "parallel:setup[2]"
          bundle exec parallel_rspec -n $PARALLEL_TESTS_CONCURRENCY --only-group $CONCURRENCY_INDEX
      - name: Archive code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.ci_node_index }}
          path: coverage/.resultset.json
      - name: Run rspec only failures
        run: bundle exec rspec --only-failures

  report-coverage:
    needs: test
    runs-on: ubuntu-20.04
    if: always()
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
      - name: Move generated files
        run: |
          mkdir -p /tmp/coverage
          artifacts=($(ls))
          for artifact in "${artifacts[@]}"; do
            mv ${artifact}/.resultset.json /tmp/coverage/.resultset-${artifact}.json
            rm -r "${artifact}"
          done
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: ./.github/actions/setup-rails-application
      - name: Collates all result sets
        run: bundle exec rails "coverage:report[/tmp/coverage/.resultset-*.json]"
      - name: Coverage Report by octocov
        uses: k1LoW/octocov-action@v1
      - name: Archive code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage

  build-github-pages:
    needs: report-coverage
    runs-on: ubuntu-20.04
    if: format('refs/heads/{0}', github.event.repository.default_branch) == github.ref
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: main
      - name: Checkout swagger-ui
        uses: actions/checkout@v4
        with:
          repository: swagger-api/swagger-ui
          ref: ${{ env.SWAGGER_UI_VERSION }}
          path: swagger-ui
      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          name: coverage
          path: coverage
      - name: Build GitHub Pages
        run: |
          mkdir -p github_pages_artifact/swagger-ui/
          cp swagger-ui/dist/* github_pages_artifact/swagger-ui/
          cp -f main/docs/dist/swagger-ui/* github_pages_artifact/swagger-ui/
          cp -r coverage github_pages_artifact/
      - name: Upload page artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: github_pages_artifact/

  deploy-github-pages:
    needs: build-github-pages
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-20.04
    if: format('refs/heads/{0}', github.event.repository.default_branch) == github.ref
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
